---
- name: Install iptables-persistent
  package:
    name: iptables-persistent
    state: present

- name: Close upstream ports
  iptables:
    action: insert
    chain: DOCKER-USER
    protocol: tcp
    in_interface: "{{ ansible_default_ipv4.interface }}"
    destination_port: "{{ item.port }}"
    jump: DROP
  notify: persist iptables
  loop_control:
    label: item.svc_name
  with_items: "{{ dp__upstream }}"

- name: Get container IP for metal proxies
  command: "docker inspect nginx-{{ upstream.svc_name }} -f '{% raw %}{{{% endraw %}.NetworkSettings.Networks.{{ dp__network_name }}.IPAddress{% raw %}}}{% endraw %}'"
  register: metal_proxies_ips
  when: not upstream.is_container
  with_items: "{{ dp__upstream }}"
  loop_control:
    loop_var: upstream
    label: upstream.svc_name
  changed_when: false

- name: debug
  debug:
    msg: "{{ metal_proxies_ips }}"

- name: "Get {{ dp__network_name }}'s gateway"
  command: "docker network inspect {{ dp__network_name }} --format {% raw -%}'{{range .IPAM.Config}}{{.Gateway}}{{end}}'{% endraw -%}"
  changed_when: false
  register: _dp__network_gateway

- name: debug
  debug:
    msg: "{{ _dp__network_gateway }}"

- name: "Get {{ dp__network_name }}'s subnet"
  command: "{% raw -%}docker inspect bridge -f '{{range .IPAM.Config}}{{.Subnet}}{{end}}'{% endraw -%}"
  register: _dp__network_subnet
  changed_when: false

- name: "Set {{ dp__network_name }} facts"
  set_fact:
    dp__network_subnet: "{{ _dp__network_subnet.stdout }}"
    dp__network_gateway: "{{ _dp__network_gateway.stdout }}"

- name: Allow the custom network to reach local servers
  iptables:
    action: insert
    chain: INPUT
    protocol: tcp
    source: "{{ dp__network_subnet }}"
    destination: "{{ dp__network_gateway }}"
    destination_port: "{{ item.port }}"
    jump: ACCEPT
  notify: persist iptables
  with_items: "{{ dp__upstream }}"
  when: not item.is_container
  loop_control:
    label: item.svc_name
