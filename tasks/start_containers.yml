---
- name: Start nginx-proxy
  docker_container:
    image: nginx
    name: nginx-proxy
    env:
      ENABLE_IPV6: "{{ dp__ipv6_enable }}"
    volumes: "{{ _dp__np_volumes }}"
    ports: "{{ _dp__np_ports }}"
    restart_policy: always
    networks:
      - name: "{{ dp__network_name }}"

- name: Start nginx-gen
  docker_container:
    image: jwilder/docker-gen
    name: nginx-gen
    restart_policy: always
    volumes:
      - /opt/nginx-proxy/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    volumes_from:
      - nginx-proxy
    networks:
      - name: "{{ dp__network_name }}"
    command: -notify-sighup nginx-proxy -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
  when: dp__le_enable

- name: Start LE container
  docker_container:
    image: jrcs/letsencrypt-nginx-proxy-companion
    name: nginx-le
    restart_policy: always
    env:
      NGINX_DOCKER_GEN_CONTAINER: nginx-gen
      NGINX_PROXY_CONTAINER: nginx-proxy
    volumes:
      - ssl_certs:/etc/nginx/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from:
      - nginx-proxy
  when: dp__le_enable

- name: Wait for LE companion to generate DH parameters (takes a long time, several minutes)
  wait_for:
    timeout: "{{ dp__le_timeout }}"
  when: dp__le_enable and not dp__testing

- name: Check for existing docker-compose.yml overrides
  find:
    path: "{{ upstream.project_src }}"
    patterns: 'docker-compose\..*\.yml'
    use_regex: true
  register: doco_list
  loop_control:
    label: "{{ upstream.svc_name }}"
    loop_var: upstream
  with_items: "{{ dp__upstream }}"
  when: upstream.is_container

- name: Recreate upstream services with extended config
  docker_service:
    project_src: "{{ item.upstream.project_src }}"
    services: "{{ item.upstream.svc_name }}"
    # combine the docker-compose.*.yml files found for this project with
    # the cusomer or default docker-compose.yml file
    files: "{{ item.files |map(attribute='path') |list + [item.upstream.doco |default('docker-compose.yml')] }}"
    # attach to new upstreams network
    recreate: always
  with_items: "{{ doco_list.results }}"
  loop_control:
    label: "{{ item.upstream.svc_name }}"
  when: item.upstream.is_container

- name: debug
  debug:
    msg: "{{ not item.upstream.is_container }}"
  with_items: "{{ doco_list.results }}"

- name: debug
  become: true
  shell: 'docker ps && docker network ls'
  changed_when: false

- name: debug
  debug:
    msg: "{{ dp__network_name }}"

- name: Get docker bridge network gateway
  command: "{% raw -%}docker network inspect bridge --format '{{range .IPAM.Config}}{{.Gateway}}{{end}}'{% endraw -%}"
  changed_when: false
  register: _dp__docker_gw_ip

- name: debug
  debug:
    msg: "{{ _dp__docker_gw_ip }}"
  changed_when: false

- name: Create directory for nginx config files if needed
  # will only create the dir if there is a non-containerized upstream service
  # defined
  file:
    path: "{{ dp__nginx_config_dir }}"
    state: directory
  when: dp__upstream |selectattr("is_container", "equalto", true)

- name: Copy nginx config file
  template:
    src: non-docker-nginx.conf.j2
    dest: "{{ dp__nginx_config_dir }}/{{ item.svc_name }}.conf"
    mode: 0755
  with_items: "{{ dp__upstream }}"
  when: not item.is_container

- name: Proxy non-docker webservers (Let's Encrypt enabled)
  docker_container:
    image: nginx
    name: "nginx-{{ item.svc_name }}"
    env:
      VIRTUAL_HOST: "{{ item.vhost }}"
      VIRTUAL_PORT: "{{ item.port }}"
      LETSENCRYPT_HOST: "{{ item.vhost  }}"
      LETSENCRYPT_EMAIL: "{{ dp__le_email }}"
      LETSENCRYPT_TEST: "{{ dp__le_test }}"
    networks:
      - name: "{{ dp__network_name }}"
      - name: bridge
    volumes:
      - "{{ dp__nginx_config_dir }}/{{ item.svc_name }}.conf:/etc/nginx/conf.d/{{ item.svc_name }}.conf:ro"
    restart_policy: always
  with_items: "{{ dp__upstream }}"
  loop_control:
    label: "{{ item.svc_name }}"
  when: not item.is_container and dp__le_enable

- name: Proxy non-docker webservers (Let's Encrypt disabled)
  docker_container:
    image: nginx
    name: "nginx-{{ item.svc_name }}"
    env:
      VIRTUAL_HOST: "{{ item.vhost }}"
      VIRTUAL_PORT: "{{ item.port }}"
    networks:
      - name: "{{ dp__network_name }}"
      - name: bridge
    restart_policy: always
  with_items: "{{ dp__upstream }}"
  loop_control:
    label: "{{ item.svc_name }}"
  when: not item.is_container and not dp__le_enable
