---
- name: Get docker bridge network gateway
  command: "{% raw -%}docker network inspect bridge --format '{{range .IPAM.Config}}{{.Gateway}}{{end}}'{% endraw -%}"
  changed_when: false
  register: _dp__docker_gw_ip

- name: Create directory for nginx config files if needed
  # will only create the dir if there is a non-containerized upstream service
  # defined
  file:
    path: "{{ dp__nginx_config_dir }}"
    state: directory
  when: dp__upstream |selectattr("is_container", "equalto", true)

- name: Copy nginx config file
  include: copy_nginx_conf.yml
  with_items: "{{ dp__upstream }}"
  loop_control:
    loop_var: upstream

- name: Configure basic auth
  htpasswd:
    path: "{{ dp__nginx_config_dir }}/{{ item.svc_name }}.htpasswd"
    name: "{{ item.bauth_user }}"
    password: "{{ item.bauth_passwd }}"
  with_items: "{{ dp__upstream}}"
  when: item.bauth_enable is defined and item.bauth_enable and not item.is_container

- name: Compose envfile
  template:
    src: nginx-envfile.j2
    dest: "{{ dp__nginx_config_dir }}/{{ item.svc_name }}.envfile"
  with_items: "{{ dp__upstream }}"

- name: Compose volumes
  template:
    src: nginx-volumes.j2
    dest: "{{ dp__nginx_config_dir }}/{{ item.svc_name }}.volumes.yml"
  with_items: "{{ dp__upstream }}"
  when: not item.is_container

- name: Slurp volumes files
  slurp:
    src: "{{ dp__nginx_config_dir }}/{{ upstream.svc_name }}.volumes.yml"
  with_items: "{{ dp__upstream }}"
  register: volumes
  loop_control:
    loop_var: upstream
  when: not upstream.is_container

- name: Proxy non-docker webservers
  docker_container:
    image: nginx
    name: "nginx-{{ item.upstream.svc_name }}"
    env_file: "{{ dp__nginx_config_dir }}/{{ item.upstream.svc_name }}.envfile"
    networks:
      - name: "{{ dp__network_name }}"
    # volumes are in a file because htpasswd is optional
    volumes: "{{ item.volumes['content'] |b64decode }}"
    restart_policy: always
  with_items: "{{ volumes }}"
  loop_control:
    label: "{{ item.upstream.svc_name }}"
  when: not item.upstream.is_container
