---
- name: Load variables for HTTP
  include_vars:
    file: http.yml
  when: not dp__le_enable

- name: Load variables for HTTPS
  include_vars:
    file: https.yml
  when: dp__le_enable

- name: Install iptables-persistent
  package:
    name: iptables-persistent
    state: present

- name: Close upstream ports
  iptables:
    action: insert
    chain: DOCKER-USER
    protocol: tcp
    in_interface: "{{ ansible_default_ipv4.interface }}"
    destination_port: "{{ item.port }}"
    jump: DROP
  notify: persist iptables
  with_items: "{{ dp__upstream }}"

- name: Create the upstream network
  docker_network:
    name: "{{ dp__network_name }}"

- name: Add upstream apps to network
  template:
    src: templates/docker-compose.proxy.yml.j2
    dest: "{{ item.project_src }}/docker-compose.proxy.yml"
    mode: '0400'
    owner: root
    group: root
  with_items: "{{ dp__upstream }}"

- name: Create SSL certificates volume
  docker_volume:
    name: ssl_certs
  when: dp__le_enable

- name: Start nginx-proxy
  docker_container:
    image: nginx
    name: nginx-proxy
    env:
      ENABLE_IPV6: "{{ dp__ipv6_enable }}"
    volumes: "{{ _dp__np_volumes }}"
    ports: "{{ _dp__np_ports }}"
    restart_policy: always
    networks:
      - name: "{{ dp__network_name }}"

- name: Create nginx-proxy directory
  file:
    path: /opt/nginx-proxy
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: dp__le_enable

- name: Copy nginx template file
  get_url:
    url: https://raw.githubusercontent.com/jwilder/nginx-proxy/master/nginx.tmpl
    dest: /opt/nginx-proxy/nginx.tmpl
    force: true
    owner: root
    group: root
    mode: "0400"
  when: dp__le_enable

- name: Start nginx-gen
  docker_container:
    image: jwilder/docker-gen
    name: nginx-gen
    volumes:
      - /opt/nginx-proxy/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    volumes_from:
      - nginx-proxy
    command: -notify-sighup nginx-proxy -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
  when: dp__le_enable

- name: Start LE container
  docker_container:
    image: jrcs/letsencrypt-nginx-proxy-companion
    name: nginx-le
    env:
      NGINX_DOCKER_GEN_CONTAINER: nginx-gen
      NGINX_PROXY_CONTAINER: nginx-proxy
    volumes:
      - ssl_certs:/etc/nginx/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from:
      - nginx-proxy
  when: dp__le_enable

- name: Wait for LE companion to generate DH parameters (takes a long time, several minutes)
  wait_for:
    timeout: 300
  when: dp__le_enable

- name: Recreate upstream services with extended config
  docker_service:
    project_src: "{{ item.project_src }}"
    services: "{{ item.svc_name }}"
    files:
      - "{{ item.doco | default('docker-compose.yml')}}"
      - docker-compose.proxy.yml
    # attach to new upstreams network
    recreate: always
  with_items: "{{ dp__upstream }}"
